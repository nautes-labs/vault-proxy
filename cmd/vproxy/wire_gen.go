// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/nautes-labs/vault-proxy/internal/biz/vaultproxy"
	"github.com/nautes-labs/vault-proxy/internal/conf"
	"github.com/nautes-labs/vault-proxy/internal/data"
	"github.com/nautes-labs/vault-proxy/internal/server"
	"github.com/nautes-labs/vault-proxy/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	vaultClientInterface := data.NewVaultClient(confData, logger)
	vaultUsercase := vaultproxy.NewVaultUsercase(vaultClientInterface, confServer, logger)
	secretService := service.NewSecretService(vaultUsercase)
	authService := service.NewAuthService(vaultUsercase)
	authGrantService := service.NewAuthGrantService(vaultUsercase)
	healthService := service.NewHealthService(vaultUsercase)
	tracerProvider, err := data.NewZipkinTracer(confData)
	if err != nil {
		return nil, nil, err
	}
	httpServer := server.NewHTTPServer(confServer, secretService, authService, authGrantService, healthService, logger, tracerProvider)
	app := newApp(logger, httpServer)
	return app, func() {
	}, nil
}
