// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: vaultproxy/v1/vaultproxy.proto

package v1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorReason int32

const (
	ErrorReason_AUTH_FAILED            ErrorReason = 0
	ErrorReason_ACTION_NOT_ALLOW       ErrorReason = 1
	ErrorReason_RESOURCE_NOT_FOUND     ErrorReason = 2
	ErrorReason_INPUT_ARG_ERROR        ErrorReason = 3
	ErrorReason_INTERNAL_SERVICE_ERROR ErrorReason = 4
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0: "AUTH_FAILED",
		1: "ACTION_NOT_ALLOW",
		2: "RESOURCE_NOT_FOUND",
		3: "INPUT_ARG_ERROR",
		4: "INTERNAL_SERVICE_ERROR",
	}
	ErrorReason_value = map[string]int32{
		"AUTH_FAILED":            0,
		"ACTION_NOT_ALLOW":       1,
		"RESOURCE_NOT_FOUND":     2,
		"INPUT_ARG_ERROR":        3,
		"INTERNAL_SERVICE_ERROR": 4,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_vaultproxy_v1_vaultproxy_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_vaultproxy_v1_vaultproxy_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{0}
}

// GIT DEFINE
type GitAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Access:
	//	*GitAccount_Deploykey
	//	*GitAccount_Accesstoken
	Access     isGitAccount_Access `protobuf_oneof:"access"`
	Accesstype string              `protobuf:"bytes,3,opt,name=accesstype,proto3" json:"accesstype,omitempty"` // The key of deploykey in secret
}

func (x *GitAccount) Reset() {
	*x = GitAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitAccount) ProtoMessage() {}

func (x *GitAccount) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitAccount.ProtoReflect.Descriptor instead.
func (*GitAccount) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{0}
}

func (m *GitAccount) GetAccess() isGitAccount_Access {
	if m != nil {
		return m.Access
	}
	return nil
}

func (x *GitAccount) GetDeploykey() string {
	if x, ok := x.GetAccess().(*GitAccount_Deploykey); ok {
		return x.Deploykey
	}
	return ""
}

func (x *GitAccount) GetAccesstoken() string {
	if x, ok := x.GetAccess().(*GitAccount_Accesstoken); ok {
		return x.Accesstoken
	}
	return ""
}

func (x *GitAccount) GetAccesstype() string {
	if x != nil {
		return x.Accesstype
	}
	return ""
}

type isGitAccount_Access interface {
	isGitAccount_Access()
}

type GitAccount_Deploykey struct {
	Deploykey string `protobuf:"bytes,1,opt,name=deploykey,proto3,oneof"` // Private key of keypair
}

type GitAccount_Accesstoken struct {
	Accesstoken string `protobuf:"bytes,2,opt,name=accesstoken,proto3,oneof"` // Not implemented
}

func (*GitAccount_Deploykey) isGitAccount_Access() {}

func (*GitAccount_Accesstoken) isGitAccount_Access() {}

type GitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providertype  string            `protobuf:"bytes,1,opt,name=providertype,proto3" json:"providertype,omitempty"`                                                                                           // Git Provider Type, gitlab or github
	Repoid        string            `protobuf:"bytes,2,opt,name=repoid,proto3" json:"repoid,omitempty"`                                                                                                       // The id of repo in git provider
	Username      string            `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                                                                                   // Not implemented, force to "default"
	Permission    string            `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`                                                                                               // Not implemented, force to "readonly"
	Account       *GitAccount       `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`                                                                                                     // Access info of this account
	AdditionalKVs map[string]string `protobuf:"bytes,6,rep,name=additionalKVs,proto3" json:"additionalKVs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // external kvs store in vault, account wiil over write it if key name is same
}

func (x *GitRequest) Reset() {
	*x = GitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRequest) ProtoMessage() {}

func (x *GitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRequest.ProtoReflect.Descriptor instead.
func (*GitRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{1}
}

func (x *GitRequest) GetProvidertype() string {
	if x != nil {
		return x.Providertype
	}
	return ""
}

func (x *GitRequest) GetRepoid() string {
	if x != nil {
		return x.Repoid
	}
	return ""
}

func (x *GitRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitRequest) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *GitRequest) GetAccount() *GitAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GitRequest) GetAdditionalKVs() map[string]string {
	if x != nil {
		return x.AdditionalKVs
	}
	return nil
}

type CreateGitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName    string `protobuf:"bytes,1,opt,name=SecretName,proto3" json:"SecretName,omitempty"`
	SecretPath    string `protobuf:"bytes,2,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretVersion int32  `protobuf:"varint,3,opt,name=SecretVersion,proto3" json:"SecretVersion,omitempty"`
}

func (x *CreateGitReply) Reset() {
	*x = CreateGitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitReply) ProtoMessage() {}

func (x *CreateGitReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitReply.ProtoReflect.Descriptor instead.
func (*CreateGitReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGitReply) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreateGitReply) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *CreateGitReply) GetSecretVersion() int32 {
	if x != nil {
		return x.SecretVersion
	}
	return 0
}

type DeleteGitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteGitReply) Reset() {
	*x = DeleteGitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitReply) ProtoMessage() {}

func (x *DeleteGitReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitReply.ProtoReflect.Descriptor instead.
func (*DeleteGitReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteGitReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// PKI DEFINE
type PkiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Cacert string `protobuf:"bytes,2,opt,name=cacert,proto3" json:"cacert,omitempty"`
	Cert   string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Key    string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PkiRequest) Reset() {
	*x = PkiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkiRequest) ProtoMessage() {}

func (x *PkiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkiRequest.ProtoReflect.Descriptor instead.
func (*PkiRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{4}
}

func (x *PkiRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PkiRequest) GetCacert() string {
	if x != nil {
		return x.Cacert
	}
	return ""
}

func (x *PkiRequest) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *PkiRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CreatePkiReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName    string `protobuf:"bytes,1,opt,name=SecretName,proto3" json:"SecretName,omitempty"`
	SecretPath    string `protobuf:"bytes,2,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretVersion int32  `protobuf:"varint,3,opt,name=SecretVersion,proto3" json:"SecretVersion,omitempty"`
}

func (x *CreatePkiReply) Reset() {
	*x = CreatePkiReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePkiReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePkiReply) ProtoMessage() {}

func (x *CreatePkiReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePkiReply.ProtoReflect.Descriptor instead.
func (*CreatePkiReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePkiReply) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreatePkiReply) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *CreatePkiReply) GetSecretVersion() int32 {
	if x != nil {
		return x.SecretVersion
	}
	return 0
}

type DeletePkiReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeletePkiReply) Reset() {
	*x = DeletePkiReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePkiReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePkiReply) ProtoMessage() {}

func (x *DeletePkiReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePkiReply.ProtoReflect.Descriptor instead.
func (*DeletePkiReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePkiReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// REPO DEFINE
type RepoAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RepoAccount) Reset() {
	*x = RepoAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAccount) ProtoMessage() {}

func (x *RepoAccount) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAccount.ProtoReflect.Descriptor instead.
func (*RepoAccount) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{7}
}

func (x *RepoAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RepoAccount) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providerid string       `protobuf:"bytes,1,opt,name=providerid,proto3" json:"providerid,omitempty"`
	Repotype   string       `protobuf:"bytes,2,opt,name=repotype,proto3" json:"repotype,omitempty"`
	Repoid     string       `protobuf:"bytes,3,opt,name=repoid,proto3" json:"repoid,omitempty"`
	Username   string       `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`     // Not implemented
	Permission string       `protobuf:"bytes,5,opt,name=permission,proto3" json:"permission,omitempty"` // Not implemented
	Account    *RepoAccount `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RepoRequest) Reset() {
	*x = RepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRequest) ProtoMessage() {}

func (x *RepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRequest.ProtoReflect.Descriptor instead.
func (*RepoRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{8}
}

func (x *RepoRequest) GetProviderid() string {
	if x != nil {
		return x.Providerid
	}
	return ""
}

func (x *RepoRequest) GetRepotype() string {
	if x != nil {
		return x.Repotype
	}
	return ""
}

func (x *RepoRequest) GetRepoid() string {
	if x != nil {
		return x.Repoid
	}
	return ""
}

func (x *RepoRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RepoRequest) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *RepoRequest) GetAccount() *RepoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type CreateRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName    string `protobuf:"bytes,1,opt,name=SecretName,proto3" json:"SecretName,omitempty"`
	SecretPath    string `protobuf:"bytes,2,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretVersion int32  `protobuf:"varint,3,opt,name=SecretVersion,proto3" json:"SecretVersion,omitempty"`
}

func (x *CreateRepoReply) Reset() {
	*x = CreateRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepoReply) ProtoMessage() {}

func (x *CreateRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepoReply.ProtoReflect.Descriptor instead.
func (*CreateRepoReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRepoReply) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreateRepoReply) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *CreateRepoReply) GetSecretVersion() int32 {
	if x != nil {
		return x.SecretVersion
	}
	return 0
}

type DeleteRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteRepoReply) Reset() {
	*x = DeleteRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepoReply) ProtoMessage() {}

func (x *DeleteRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepoReply.ProtoReflect.Descriptor instead.
func (*DeleteRepoReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRepoReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// TENANT DEFINE
type TenantGitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Permission string      `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"` // Not implemented, force to "root"
	Account    *GitAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`       // Access info of this account
}

func (x *TenantGitRequest) Reset() {
	*x = TenantGitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantGitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantGitRequest) ProtoMessage() {}

func (x *TenantGitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantGitRequest.ProtoReflect.Descriptor instead.
func (*TenantGitRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{11}
}

func (x *TenantGitRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TenantGitRequest) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *TenantGitRequest) GetAccount() *GitAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type CreateTenantGitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName    string `protobuf:"bytes,1,opt,name=SecretName,proto3" json:"SecretName,omitempty"`
	SecretPath    string `protobuf:"bytes,2,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretVersion int32  `protobuf:"varint,3,opt,name=SecretVersion,proto3" json:"SecretVersion,omitempty"`
}

func (x *CreateTenantGitReply) Reset() {
	*x = CreateTenantGitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTenantGitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantGitReply) ProtoMessage() {}

func (x *CreateTenantGitReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantGitReply.ProtoReflect.Descriptor instead.
func (*CreateTenantGitReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{12}
}

func (x *CreateTenantGitReply) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreateTenantGitReply) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *CreateTenantGitReply) GetSecretVersion() int32 {
	if x != nil {
		return x.SecretVersion
	}
	return 0
}

type DeleteTenantGitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteTenantGitReply) Reset() {
	*x = DeleteTenantGitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantGitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantGitReply) ProtoMessage() {}

func (x *DeleteTenantGitReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantGitReply.ProtoReflect.Descriptor instead.
func (*DeleteTenantGitReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteTenantGitReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//////////////////////////////////
type TenantRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Permission string       `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	Account    *RepoAccount `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *TenantRepoRequest) Reset() {
	*x = TenantRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantRepoRequest) ProtoMessage() {}

func (x *TenantRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantRepoRequest.ProtoReflect.Descriptor instead.
func (*TenantRepoRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{14}
}

func (x *TenantRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TenantRepoRequest) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *TenantRepoRequest) GetAccount() *RepoAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type CreateTenantRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName    string `protobuf:"bytes,1,opt,name=SecretName,proto3" json:"SecretName,omitempty"`
	SecretPath    string `protobuf:"bytes,2,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretVersion int32  `protobuf:"varint,3,opt,name=SecretVersion,proto3" json:"SecretVersion,omitempty"`
}

func (x *CreateTenantRepoReply) Reset() {
	*x = CreateTenantRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTenantRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRepoReply) ProtoMessage() {}

func (x *CreateTenantRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRepoReply.ProtoReflect.Descriptor instead.
func (*CreateTenantRepoReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTenantRepoReply) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreateTenantRepoReply) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *CreateTenantRepoReply) GetSecretVersion() int32 {
	if x != nil {
		return x.SecretVersion
	}
	return 0
}

type DeleteTenantRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteTenantRepoReply) Reset() {
	*x = DeleteTenantRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantRepoReply) ProtoMessage() {}

func (x *DeleteTenantRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantRepoReply.ProtoReflect.Descriptor instead.
func (*DeleteTenantRepoReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteTenantRepoReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// CLUSTER DEFINE
type ClusterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Cluster resouce type, only support kubernetes now
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`     // Cluster name defined in git repo
}

func (x *ClusterMeta) Reset() {
	*x = ClusterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMeta) ProtoMessage() {}

func (x *ClusterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMeta.ProtoReflect.Descriptor instead.
func (*ClusterMeta) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{17}
}

func (x *ClusterMeta) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClusterUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"` // Account permission
}

func (x *ClusterUser) Reset() {
	*x = ClusterUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUser) ProtoMessage() {}

func (x *ClusterUser) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUser.ProtoReflect.Descriptor instead.
func (*ClusterUser) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{18}
}

func (x *ClusterUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterUser) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

type ClusterAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert       *ClusterAccount_CERT  `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Token      string                `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Oauth      *ClusterAccount_OAUTH `protobuf:"bytes,3,opt,name=oauth,proto3" json:"oauth,omitempty"`
	Kubeconfig string                `protobuf:"bytes,4,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"` // Kubeconfig file to access cluster
}

func (x *ClusterAccount) Reset() {
	*x = ClusterAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccount) ProtoMessage() {}

func (x *ClusterAccount) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccount.ProtoReflect.Descriptor instead.
func (*ClusterAccount) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterAccount) GetCert() *ClusterAccount_CERT {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *ClusterAccount) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClusterAccount) GetOauth() *ClusterAccount_OAUTH {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *ClusterAccount) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

type ClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clustertype string          `protobuf:"bytes,1,opt,name=clustertype,proto3" json:"clustertype,omitempty"` // type of cluster, such as k8s,aws, virtual machine controller, only support "kubernetes"
	Clusterid   string          `protobuf:"bytes,2,opt,name=clusterid,proto3" json:"clusterid,omitempty"`
	Username    string          `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`     // Not implemented, force to "default"
	Permission  string          `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"` // Not implemented, force to "admin"
	Account     *ClusterAccount `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`       // Cluster access info, such as kubeconfig when clsuter type is kubernetes
}

func (x *ClusterRequest) Reset() {
	*x = ClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRequest) ProtoMessage() {}

func (x *ClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRequest.ProtoReflect.Descriptor instead.
func (*ClusterRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterRequest) GetClustertype() string {
	if x != nil {
		return x.Clustertype
	}
	return ""
}

func (x *ClusterRequest) GetClusterid() string {
	if x != nil {
		return x.Clusterid
	}
	return ""
}

func (x *ClusterRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClusterRequest) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *ClusterRequest) GetAccount() *ClusterAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type CreateClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName    string `protobuf:"bytes,1,opt,name=SecretName,proto3" json:"SecretName,omitempty"`
	SecretPath    string `protobuf:"bytes,2,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretVersion int32  `protobuf:"varint,3,opt,name=SecretVersion,proto3" json:"SecretVersion,omitempty"`
}

func (x *CreateClusterReply) Reset() {
	*x = CreateClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterReply) ProtoMessage() {}

func (x *CreateClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterReply.ProtoReflect.Descriptor instead.
func (*CreateClusterReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{21}
}

func (x *CreateClusterReply) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreateClusterReply) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *CreateClusterReply) GetSecretVersion() int32 {
	if x != nil {
		return x.SecretVersion
	}
	return 0
}

type DeleteClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteClusterReply) Reset() {
	*x = DeleteClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterReply) ProtoMessage() {}

func (x *DeleteClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterReply.ProtoReflect.Descriptor instead.
func (*DeleteClusterReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteClusterReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Kubernetes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`             // Kubernetes URL
	Cabundle  string `protobuf:"bytes,2,opt,name=cabundle,proto3" json:"cabundle,omitempty"`   // Options, Kubernetes cabundle when url is https
	Usertoken string `protobuf:"bytes,3,opt,name=usertoken,proto3" json:"usertoken,omitempty"` // The k8s service account token witch has "system:auth-delegator" role
}

func (x *Kubernetes) Reset() {
	*x = Kubernetes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kubernetes) ProtoMessage() {}

func (x *Kubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kubernetes.ProtoReflect.Descriptor instead.
func (*Kubernetes) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{23}
}

func (x *Kubernetes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Kubernetes) GetCabundle() string {
	if x != nil {
		return x.Cabundle
	}
	return ""
}

func (x *Kubernetes) GetUsertoken() string {
	if x != nil {
		return x.Usertoken
	}
	return ""
}

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string      `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"` // Vault auth path
	AuthType    string      `protobuf:"bytes,2,opt,name=authType,proto3" json:"authType,omitempty"`       // Vault auth type
	Kubernetes  *Kubernetes `protobuf:"bytes,3,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`   // Vault auth setting when type is k8s
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{24}
}

func (x *AuthRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthRequest) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *AuthRequest) GetKubernetes() *Kubernetes {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

type CreateAuthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CreateAuthReply) Reset() {
	*x = CreateAuthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthReply) ProtoMessage() {}

func (x *CreateAuthReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthReply.ProtoReflect.Descriptor instead.
func (*CreateAuthReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{25}
}

func (x *CreateAuthReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeleteAuthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteAuthReply) Reset() {
	*x = DeleteAuthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthReply) ProtoMessage() {}

func (x *DeleteAuthReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthReply.ProtoReflect.Descriptor instead.
func (*DeleteAuthReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteAuthReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type KubernetesAuthRoleMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces      string `protobuf:"bytes,1,opt,name=namespaces,proto3" json:"namespaces,omitempty"`           // Array. The namespaces of role binding
	Serviceaccounts string `protobuf:"bytes,2,opt,name=serviceaccounts,proto3" json:"serviceaccounts,omitempty"` // Array. The serviceaccount of role binding
}

func (x *KubernetesAuthRoleMeta) Reset() {
	*x = KubernetesAuthRoleMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesAuthRoleMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAuthRoleMeta) ProtoMessage() {}

func (x *KubernetesAuthRoleMeta) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAuthRoleMeta.ProtoReflect.Descriptor instead.
func (*KubernetesAuthRoleMeta) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{27}
}

func (x *KubernetesAuthRoleMeta) GetNamespaces() string {
	if x != nil {
		return x.Namespaces
	}
	return ""
}

func (x *KubernetesAuthRoleMeta) GetServiceaccounts() string {
	if x != nil {
		return x.Serviceaccounts
	}
	return ""
}

type AuthroleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"` // Vault path of kubernetes auth
	DestUser    string `protobuf:"bytes,2,opt,name=destUser,proto3" json:"destUser,omitempty"`       // Vault role name in kubernetes auth
	// Types that are assignable to Role:
	//	*AuthroleRequest_K8S
	Role isAuthroleRequest_Role `protobuf_oneof:"role"`
}

func (x *AuthroleRequest) Reset() {
	*x = AuthroleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthroleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthroleRequest) ProtoMessage() {}

func (x *AuthroleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthroleRequest.ProtoReflect.Descriptor instead.
func (*AuthroleRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{28}
}

func (x *AuthroleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthroleRequest) GetDestUser() string {
	if x != nil {
		return x.DestUser
	}
	return ""
}

func (m *AuthroleRequest) GetRole() isAuthroleRequest_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *AuthroleRequest) GetK8S() *KubernetesAuthRoleMeta {
	if x, ok := x.GetRole().(*AuthroleRequest_K8S); ok {
		return x.K8S
	}
	return nil
}

type isAuthroleRequest_Role interface {
	isAuthroleRequest_Role()
}

type AuthroleRequest_K8S struct {
	K8S *KubernetesAuthRoleMeta `protobuf:"bytes,3,opt,name=k8s,proto3,oneof"`
}

func (*AuthroleRequest_K8S) isAuthroleRequest_Role() {}

type CreateAuthroleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CreateAuthroleReply) Reset() {
	*x = CreateAuthroleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuthroleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthroleReply) ProtoMessage() {}

func (x *CreateAuthroleReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthroleReply.ProtoReflect.Descriptor instead.
func (*CreateAuthroleReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{29}
}

func (x *CreateAuthroleReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeleteAuthroleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteAuthroleReply) Reset() {
	*x = DeleteAuthroleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthroleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthroleReply) ProtoMessage() {}

func (x *DeleteAuthroleReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthroleReply.ProtoReflect.Descriptor instead.
func (*DeleteAuthroleReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteAuthroleReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type AuthroleGitPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string      `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	DestUser      string      `protobuf:"bytes,2,opt,name=destUser,proto3" json:"destUser,omitempty"`
	SecretOptions *GitRequest `protobuf:"bytes,3,opt,name=secret_options,json=secretOptions,proto3" json:"secret_options,omitempty"`
}

func (x *AuthroleGitPolicyRequest) Reset() {
	*x = AuthroleGitPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthroleGitPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthroleGitPolicyRequest) ProtoMessage() {}

func (x *AuthroleGitPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthroleGitPolicyRequest.ProtoReflect.Descriptor instead.
func (*AuthroleGitPolicyRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{31}
}

func (x *AuthroleGitPolicyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthroleGitPolicyRequest) GetDestUser() string {
	if x != nil {
		return x.DestUser
	}
	return ""
}

func (x *AuthroleGitPolicyRequest) GetSecretOptions() *GitRequest {
	if x != nil {
		return x.SecretOptions
	}
	return nil
}

type AuthroleRepoPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string       `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	DestUser      string       `protobuf:"bytes,2,opt,name=destUser,proto3" json:"destUser,omitempty"`
	SecretOptions *RepoRequest `protobuf:"bytes,3,opt,name=secret_options,json=secretOptions,proto3" json:"secret_options,omitempty"`
}

func (x *AuthroleRepoPolicyRequest) Reset() {
	*x = AuthroleRepoPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthroleRepoPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthroleRepoPolicyRequest) ProtoMessage() {}

func (x *AuthroleRepoPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthroleRepoPolicyRequest.ProtoReflect.Descriptor instead.
func (*AuthroleRepoPolicyRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{32}
}

func (x *AuthroleRepoPolicyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthroleRepoPolicyRequest) GetDestUser() string {
	if x != nil {
		return x.DestUser
	}
	return ""
}

func (x *AuthroleRepoPolicyRequest) GetSecretOptions() *RepoRequest {
	if x != nil {
		return x.SecretOptions
	}
	return nil
}

type AuthroleClusterPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string          `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	DestUser      string          `protobuf:"bytes,2,opt,name=destUser,proto3" json:"destUser,omitempty"`
	SecretOptions *ClusterRequest `protobuf:"bytes,3,opt,name=secret_options,json=secretOptions,proto3" json:"secret_options,omitempty"`
}

func (x *AuthroleClusterPolicyRequest) Reset() {
	*x = AuthroleClusterPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthroleClusterPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthroleClusterPolicyRequest) ProtoMessage() {}

func (x *AuthroleClusterPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthroleClusterPolicyRequest.ProtoReflect.Descriptor instead.
func (*AuthroleClusterPolicyRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{33}
}

func (x *AuthroleClusterPolicyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthroleClusterPolicyRequest) GetDestUser() string {
	if x != nil {
		return x.DestUser
	}
	return ""
}

func (x *AuthroleClusterPolicyRequest) GetSecretOptions() *ClusterRequest {
	if x != nil {
		return x.SecretOptions
	}
	return nil
}

type AuthroleTenantGitPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string      `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	DestUser      string      `protobuf:"bytes,2,opt,name=destUser,proto3" json:"destUser,omitempty"`
	SecretOptions *GitRequest `protobuf:"bytes,3,opt,name=secret_options,json=secretOptions,proto3" json:"secret_options,omitempty"`
}

func (x *AuthroleTenantGitPolicyRequest) Reset() {
	*x = AuthroleTenantGitPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthroleTenantGitPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthroleTenantGitPolicyRequest) ProtoMessage() {}

func (x *AuthroleTenantGitPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthroleTenantGitPolicyRequest.ProtoReflect.Descriptor instead.
func (*AuthroleTenantGitPolicyRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{34}
}

func (x *AuthroleTenantGitPolicyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthroleTenantGitPolicyRequest) GetDestUser() string {
	if x != nil {
		return x.DestUser
	}
	return ""
}

func (x *AuthroleTenantGitPolicyRequest) GetSecretOptions() *GitRequest {
	if x != nil {
		return x.SecretOptions
	}
	return nil
}

type AuthroleTenantRepoPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string       `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	DestUser      string       `protobuf:"bytes,2,opt,name=destUser,proto3" json:"destUser,omitempty"`
	SecretOptions *RepoRequest `protobuf:"bytes,3,opt,name=secret_options,json=secretOptions,proto3" json:"secret_options,omitempty"`
}

func (x *AuthroleTenantRepoPolicyRequest) Reset() {
	*x = AuthroleTenantRepoPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthroleTenantRepoPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthroleTenantRepoPolicyRequest) ProtoMessage() {}

func (x *AuthroleTenantRepoPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthroleTenantRepoPolicyRequest.ProtoReflect.Descriptor instead.
func (*AuthroleTenantRepoPolicyRequest) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{35}
}

func (x *AuthroleTenantRepoPolicyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthroleTenantRepoPolicyRequest) GetDestUser() string {
	if x != nil {
		return x.DestUser
	}
	return ""
}

func (x *AuthroleTenantRepoPolicyRequest) GetSecretOptions() *RepoRequest {
	if x != nil {
		return x.SecretOptions
	}
	return nil
}

type GrantAuthrolePolicyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *GrantAuthrolePolicyReply) Reset() {
	*x = GrantAuthrolePolicyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantAuthrolePolicyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantAuthrolePolicyReply) ProtoMessage() {}

func (x *GrantAuthrolePolicyReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantAuthrolePolicyReply.ProtoReflect.Descriptor instead.
func (*GrantAuthrolePolicyReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{36}
}

func (x *GrantAuthrolePolicyReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RevokeAuthrolePolicyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RevokeAuthrolePolicyReply) Reset() {
	*x = RevokeAuthrolePolicyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeAuthrolePolicyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeAuthrolePolicyReply) ProtoMessage() {}

func (x *RevokeAuthrolePolicyReply) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeAuthrolePolicyReply.ProtoReflect.Descriptor instead.
func (*RevokeAuthrolePolicyReply) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{37}
}

func (x *RevokeAuthrolePolicyReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// Not implemented
type ClusterAccount_CERT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKey  string `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ClientCert string `protobuf:"bytes,2,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
}

func (x *ClusterAccount_CERT) Reset() {
	*x = ClusterAccount_CERT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAccount_CERT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccount_CERT) ProtoMessage() {}

func (x *ClusterAccount_CERT) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccount_CERT.ProtoReflect.Descriptor instead.
func (*ClusterAccount_CERT) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ClusterAccount_CERT) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *ClusterAccount_CERT) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

// Not implemented
type ClusterAccount_OAUTH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ClusterAccount_OAUTH) Reset() {
	*x = ClusterAccount_OAUTH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAccount_OAUTH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccount_OAUTH) ProtoMessage() {}

func (x *ClusterAccount_OAUTH) ProtoReflect() protoreflect.Message {
	mi := &file_vaultproxy_v1_vaultproxy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccount_OAUTH.ProtoReflect.Descriptor instead.
func (*ClusterAccount_OAUTH) Descriptor() ([]byte, []int) {
	return file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP(), []int{19, 1}
}

func (x *ClusterAccount_OAUTH) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClusterAccount_OAUTH) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_vaultproxy_v1_vaultproxy_proto protoreflect.FileDescriptor

var file_vaultproxy_v1_vaultproxy_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4b, 0x56, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x62, 0x0a, 0x0a, 0x50, 0x6b, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x76, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6b, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6b,
	0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x45, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xd7, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x7b, 0x0a, 0x10, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x7d, 0x0a, 0x11,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x02, 0x0a, 0x0e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x43, 0x45, 0x52, 0x54, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3d, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x46, 0x0a, 0x04, 0x43, 0x45, 0x52, 0x54, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x1a, 0x3f, 0x0a, 0x05, 0x4f, 0x41, 0x55, 0x54, 0x48,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x26, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x58, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x22,
	0x23, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x23, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x62, 0x0a, 0x16, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x27, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x27, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74,
	0x68, 0x72, 0x6f, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x41, 0x75,
	0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x1c, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f,
	0x6c, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x1f, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x2a, 0x9b, 0x01, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x1a,
	0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1c, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x04, 0xa8,
	0x45, 0x94, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x52, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03,
	0x32, 0xe1, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0c, 0x22, 0x07, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8e,
	0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x2a, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12,
	0x61, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6b, 0x69, 0x12, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6b, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6b, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x07, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6b, 0x69, 0x3a,
	0x01, 0x2a, 0x12, 0x67, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6b, 0x69, 0x12,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6b, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6b, 0x69, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6b, 0x69, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x12, 0x65, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x3a,
	0x01, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x2a, 0x41, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d,
	0x12, 0x79, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x69, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x12, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2f, 0x67, 0x69, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x71,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x01,
	0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x2a, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x7d,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x7d, 0x32, 0xf5, 0x03, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x65, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x7d, 0x32, 0x88, 0x0f, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x16, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f,
	0x6c, 0x65, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xb1, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f,
	0x6c, 0x65, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x67, 0x69, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x39, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f,
	0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x2a, 0x37, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c,
	0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xc4, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72,
	0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x2a, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x67,
	0x69, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c,
	0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x3b, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0xc7, 0x01,
	0x0a, 0x1e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x32, 0x0a, 0x11, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x1b,
	0x76, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_vaultproxy_v1_vaultproxy_proto_rawDescOnce sync.Once
	file_vaultproxy_v1_vaultproxy_proto_rawDescData = file_vaultproxy_v1_vaultproxy_proto_rawDesc
)

func file_vaultproxy_v1_vaultproxy_proto_rawDescGZIP() []byte {
	file_vaultproxy_v1_vaultproxy_proto_rawDescOnce.Do(func() {
		file_vaultproxy_v1_vaultproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_vaultproxy_v1_vaultproxy_proto_rawDescData)
	})
	return file_vaultproxy_v1_vaultproxy_proto_rawDescData
}

var file_vaultproxy_v1_vaultproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vaultproxy_v1_vaultproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_vaultproxy_v1_vaultproxy_proto_goTypes = []interface{}{
	(ErrorReason)(0),                        // 0: api.vaultproxy.v1.ErrorReason
	(*GitAccount)(nil),                      // 1: api.vaultproxy.v1.GitAccount
	(*GitRequest)(nil),                      // 2: api.vaultproxy.v1.GitRequest
	(*CreateGitReply)(nil),                  // 3: api.vaultproxy.v1.CreateGitReply
	(*DeleteGitReply)(nil),                  // 4: api.vaultproxy.v1.DeleteGitReply
	(*PkiRequest)(nil),                      // 5: api.vaultproxy.v1.PkiRequest
	(*CreatePkiReply)(nil),                  // 6: api.vaultproxy.v1.CreatePkiReply
	(*DeletePkiReply)(nil),                  // 7: api.vaultproxy.v1.DeletePkiReply
	(*RepoAccount)(nil),                     // 8: api.vaultproxy.v1.RepoAccount
	(*RepoRequest)(nil),                     // 9: api.vaultproxy.v1.RepoRequest
	(*CreateRepoReply)(nil),                 // 10: api.vaultproxy.v1.CreateRepoReply
	(*DeleteRepoReply)(nil),                 // 11: api.vaultproxy.v1.DeleteRepoReply
	(*TenantGitRequest)(nil),                // 12: api.vaultproxy.v1.TenantGitRequest
	(*CreateTenantGitReply)(nil),            // 13: api.vaultproxy.v1.CreateTenantGitReply
	(*DeleteTenantGitReply)(nil),            // 14: api.vaultproxy.v1.DeleteTenantGitReply
	(*TenantRepoRequest)(nil),               // 15: api.vaultproxy.v1.TenantRepoRequest
	(*CreateTenantRepoReply)(nil),           // 16: api.vaultproxy.v1.CreateTenantRepoReply
	(*DeleteTenantRepoReply)(nil),           // 17: api.vaultproxy.v1.DeleteTenantRepoReply
	(*ClusterMeta)(nil),                     // 18: api.vaultproxy.v1.ClusterMeta
	(*ClusterUser)(nil),                     // 19: api.vaultproxy.v1.ClusterUser
	(*ClusterAccount)(nil),                  // 20: api.vaultproxy.v1.ClusterAccount
	(*ClusterRequest)(nil),                  // 21: api.vaultproxy.v1.ClusterRequest
	(*CreateClusterReply)(nil),              // 22: api.vaultproxy.v1.CreateClusterReply
	(*DeleteClusterReply)(nil),              // 23: api.vaultproxy.v1.DeleteClusterReply
	(*Kubernetes)(nil),                      // 24: api.vaultproxy.v1.Kubernetes
	(*AuthRequest)(nil),                     // 25: api.vaultproxy.v1.AuthRequest
	(*CreateAuthReply)(nil),                 // 26: api.vaultproxy.v1.CreateAuthReply
	(*DeleteAuthReply)(nil),                 // 27: api.vaultproxy.v1.DeleteAuthReply
	(*KubernetesAuthRoleMeta)(nil),          // 28: api.vaultproxy.v1.KubernetesAuthRoleMeta
	(*AuthroleRequest)(nil),                 // 29: api.vaultproxy.v1.AuthroleRequest
	(*CreateAuthroleReply)(nil),             // 30: api.vaultproxy.v1.CreateAuthroleReply
	(*DeleteAuthroleReply)(nil),             // 31: api.vaultproxy.v1.DeleteAuthroleReply
	(*AuthroleGitPolicyRequest)(nil),        // 32: api.vaultproxy.v1.AuthroleGitPolicyRequest
	(*AuthroleRepoPolicyRequest)(nil),       // 33: api.vaultproxy.v1.AuthroleRepoPolicyRequest
	(*AuthroleClusterPolicyRequest)(nil),    // 34: api.vaultproxy.v1.AuthroleClusterPolicyRequest
	(*AuthroleTenantGitPolicyRequest)(nil),  // 35: api.vaultproxy.v1.AuthroleTenantGitPolicyRequest
	(*AuthroleTenantRepoPolicyRequest)(nil), // 36: api.vaultproxy.v1.AuthroleTenantRepoPolicyRequest
	(*GrantAuthrolePolicyReply)(nil),        // 37: api.vaultproxy.v1.GrantAuthrolePolicyReply
	(*RevokeAuthrolePolicyReply)(nil),       // 38: api.vaultproxy.v1.RevokeAuthrolePolicyReply
	nil,                                     // 39: api.vaultproxy.v1.GitRequest.AdditionalKVsEntry
	(*ClusterAccount_CERT)(nil),             // 40: api.vaultproxy.v1.ClusterAccount.CERT
	(*ClusterAccount_OAUTH)(nil),            // 41: api.vaultproxy.v1.ClusterAccount.OAUTH
}
var file_vaultproxy_v1_vaultproxy_proto_depIdxs = []int32{
	1,  // 0: api.vaultproxy.v1.GitRequest.account:type_name -> api.vaultproxy.v1.GitAccount
	39, // 1: api.vaultproxy.v1.GitRequest.additionalKVs:type_name -> api.vaultproxy.v1.GitRequest.AdditionalKVsEntry
	8,  // 2: api.vaultproxy.v1.RepoRequest.account:type_name -> api.vaultproxy.v1.RepoAccount
	1,  // 3: api.vaultproxy.v1.TenantGitRequest.account:type_name -> api.vaultproxy.v1.GitAccount
	8,  // 4: api.vaultproxy.v1.TenantRepoRequest.account:type_name -> api.vaultproxy.v1.RepoAccount
	40, // 5: api.vaultproxy.v1.ClusterAccount.cert:type_name -> api.vaultproxy.v1.ClusterAccount.CERT
	41, // 6: api.vaultproxy.v1.ClusterAccount.oauth:type_name -> api.vaultproxy.v1.ClusterAccount.OAUTH
	20, // 7: api.vaultproxy.v1.ClusterRequest.account:type_name -> api.vaultproxy.v1.ClusterAccount
	24, // 8: api.vaultproxy.v1.AuthRequest.kubernetes:type_name -> api.vaultproxy.v1.Kubernetes
	28, // 9: api.vaultproxy.v1.AuthroleRequest.k8s:type_name -> api.vaultproxy.v1.KubernetesAuthRoleMeta
	2,  // 10: api.vaultproxy.v1.AuthroleGitPolicyRequest.secret_options:type_name -> api.vaultproxy.v1.GitRequest
	9,  // 11: api.vaultproxy.v1.AuthroleRepoPolicyRequest.secret_options:type_name -> api.vaultproxy.v1.RepoRequest
	21, // 12: api.vaultproxy.v1.AuthroleClusterPolicyRequest.secret_options:type_name -> api.vaultproxy.v1.ClusterRequest
	2,  // 13: api.vaultproxy.v1.AuthroleTenantGitPolicyRequest.secret_options:type_name -> api.vaultproxy.v1.GitRequest
	9,  // 14: api.vaultproxy.v1.AuthroleTenantRepoPolicyRequest.secret_options:type_name -> api.vaultproxy.v1.RepoRequest
	2,  // 15: api.vaultproxy.v1.Secret.CreateGit:input_type -> api.vaultproxy.v1.GitRequest
	2,  // 16: api.vaultproxy.v1.Secret.DeleteGit:input_type -> api.vaultproxy.v1.GitRequest
	5,  // 17: api.vaultproxy.v1.Secret.CreatePki:input_type -> api.vaultproxy.v1.PkiRequest
	5,  // 18: api.vaultproxy.v1.Secret.DeletePki:input_type -> api.vaultproxy.v1.PkiRequest
	9,  // 19: api.vaultproxy.v1.Secret.CreateRepo:input_type -> api.vaultproxy.v1.RepoRequest
	9,  // 20: api.vaultproxy.v1.Secret.DeleteRepo:input_type -> api.vaultproxy.v1.RepoRequest
	12, // 21: api.vaultproxy.v1.Secret.CreteTenantGit:input_type -> api.vaultproxy.v1.TenantGitRequest
	12, // 22: api.vaultproxy.v1.Secret.DeleteTenantGit:input_type -> api.vaultproxy.v1.TenantGitRequest
	15, // 23: api.vaultproxy.v1.Secret.CreateTenantRepo:input_type -> api.vaultproxy.v1.TenantRepoRequest
	15, // 24: api.vaultproxy.v1.Secret.DeleteTenantRepo:input_type -> api.vaultproxy.v1.TenantRepoRequest
	21, // 25: api.vaultproxy.v1.Secret.CreateCluster:input_type -> api.vaultproxy.v1.ClusterRequest
	21, // 26: api.vaultproxy.v1.Secret.DeleteCluster:input_type -> api.vaultproxy.v1.ClusterRequest
	25, // 27: api.vaultproxy.v1.Auth.CreateAuth:input_type -> api.vaultproxy.v1.AuthRequest
	25, // 28: api.vaultproxy.v1.Auth.DeleteAuth:input_type -> api.vaultproxy.v1.AuthRequest
	29, // 29: api.vaultproxy.v1.Auth.CreateAuthrole:input_type -> api.vaultproxy.v1.AuthroleRequest
	29, // 30: api.vaultproxy.v1.Auth.DeleteAuthrole:input_type -> api.vaultproxy.v1.AuthroleRequest
	32, // 31: api.vaultproxy.v1.AuthGrant.GrantAuthroleGitPolicy:input_type -> api.vaultproxy.v1.AuthroleGitPolicyRequest
	32, // 32: api.vaultproxy.v1.AuthGrant.RevokeAuthroleGitPolicy:input_type -> api.vaultproxy.v1.AuthroleGitPolicyRequest
	33, // 33: api.vaultproxy.v1.AuthGrant.GrantAuthroleRepoPolicy:input_type -> api.vaultproxy.v1.AuthroleRepoPolicyRequest
	33, // 34: api.vaultproxy.v1.AuthGrant.RevokeAuthroleRepoPolicy:input_type -> api.vaultproxy.v1.AuthroleRepoPolicyRequest
	34, // 35: api.vaultproxy.v1.AuthGrant.GrantAuthroleClusterPolicy:input_type -> api.vaultproxy.v1.AuthroleClusterPolicyRequest
	34, // 36: api.vaultproxy.v1.AuthGrant.RevokeAuthroleClusterPolicy:input_type -> api.vaultproxy.v1.AuthroleClusterPolicyRequest
	35, // 37: api.vaultproxy.v1.AuthGrant.GrantAuthroleTenantGitPolicy:input_type -> api.vaultproxy.v1.AuthroleTenantGitPolicyRequest
	35, // 38: api.vaultproxy.v1.AuthGrant.RevokeAuthroleTenantGitPolicy:input_type -> api.vaultproxy.v1.AuthroleTenantGitPolicyRequest
	36, // 39: api.vaultproxy.v1.AuthGrant.GrantAuthroleTenantRepoPolicy:input_type -> api.vaultproxy.v1.AuthroleTenantRepoPolicyRequest
	36, // 40: api.vaultproxy.v1.AuthGrant.RevokeAuthroleTenantRepoPolicy:input_type -> api.vaultproxy.v1.AuthroleTenantRepoPolicyRequest
	3,  // 41: api.vaultproxy.v1.Secret.CreateGit:output_type -> api.vaultproxy.v1.CreateGitReply
	4,  // 42: api.vaultproxy.v1.Secret.DeleteGit:output_type -> api.vaultproxy.v1.DeleteGitReply
	6,  // 43: api.vaultproxy.v1.Secret.CreatePki:output_type -> api.vaultproxy.v1.CreatePkiReply
	7,  // 44: api.vaultproxy.v1.Secret.DeletePki:output_type -> api.vaultproxy.v1.DeletePkiReply
	10, // 45: api.vaultproxy.v1.Secret.CreateRepo:output_type -> api.vaultproxy.v1.CreateRepoReply
	11, // 46: api.vaultproxy.v1.Secret.DeleteRepo:output_type -> api.vaultproxy.v1.DeleteRepoReply
	13, // 47: api.vaultproxy.v1.Secret.CreteTenantGit:output_type -> api.vaultproxy.v1.CreateTenantGitReply
	14, // 48: api.vaultproxy.v1.Secret.DeleteTenantGit:output_type -> api.vaultproxy.v1.DeleteTenantGitReply
	16, // 49: api.vaultproxy.v1.Secret.CreateTenantRepo:output_type -> api.vaultproxy.v1.CreateTenantRepoReply
	17, // 50: api.vaultproxy.v1.Secret.DeleteTenantRepo:output_type -> api.vaultproxy.v1.DeleteTenantRepoReply
	22, // 51: api.vaultproxy.v1.Secret.CreateCluster:output_type -> api.vaultproxy.v1.CreateClusterReply
	23, // 52: api.vaultproxy.v1.Secret.DeleteCluster:output_type -> api.vaultproxy.v1.DeleteClusterReply
	26, // 53: api.vaultproxy.v1.Auth.CreateAuth:output_type -> api.vaultproxy.v1.CreateAuthReply
	27, // 54: api.vaultproxy.v1.Auth.DeleteAuth:output_type -> api.vaultproxy.v1.DeleteAuthReply
	30, // 55: api.vaultproxy.v1.Auth.CreateAuthrole:output_type -> api.vaultproxy.v1.CreateAuthroleReply
	31, // 56: api.vaultproxy.v1.Auth.DeleteAuthrole:output_type -> api.vaultproxy.v1.DeleteAuthroleReply
	37, // 57: api.vaultproxy.v1.AuthGrant.GrantAuthroleGitPolicy:output_type -> api.vaultproxy.v1.GrantAuthrolePolicyReply
	38, // 58: api.vaultproxy.v1.AuthGrant.RevokeAuthroleGitPolicy:output_type -> api.vaultproxy.v1.RevokeAuthrolePolicyReply
	37, // 59: api.vaultproxy.v1.AuthGrant.GrantAuthroleRepoPolicy:output_type -> api.vaultproxy.v1.GrantAuthrolePolicyReply
	38, // 60: api.vaultproxy.v1.AuthGrant.RevokeAuthroleRepoPolicy:output_type -> api.vaultproxy.v1.RevokeAuthrolePolicyReply
	37, // 61: api.vaultproxy.v1.AuthGrant.GrantAuthroleClusterPolicy:output_type -> api.vaultproxy.v1.GrantAuthrolePolicyReply
	38, // 62: api.vaultproxy.v1.AuthGrant.RevokeAuthroleClusterPolicy:output_type -> api.vaultproxy.v1.RevokeAuthrolePolicyReply
	37, // 63: api.vaultproxy.v1.AuthGrant.GrantAuthroleTenantGitPolicy:output_type -> api.vaultproxy.v1.GrantAuthrolePolicyReply
	38, // 64: api.vaultproxy.v1.AuthGrant.RevokeAuthroleTenantGitPolicy:output_type -> api.vaultproxy.v1.RevokeAuthrolePolicyReply
	37, // 65: api.vaultproxy.v1.AuthGrant.GrantAuthroleTenantRepoPolicy:output_type -> api.vaultproxy.v1.GrantAuthrolePolicyReply
	38, // 66: api.vaultproxy.v1.AuthGrant.RevokeAuthroleTenantRepoPolicy:output_type -> api.vaultproxy.v1.RevokeAuthrolePolicyReply
	41, // [41:67] is the sub-list for method output_type
	15, // [15:41] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_vaultproxy_v1_vaultproxy_proto_init() }
func file_vaultproxy_v1_vaultproxy_proto_init() {
	if File_vaultproxy_v1_vaultproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePkiReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePkiReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantGitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTenantGitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantGitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTenantRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kubernetes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesAuthRoleMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthroleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuthroleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthroleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthroleGitPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthroleRepoPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthroleClusterPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthroleTenantGitPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthroleTenantRepoPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantAuthrolePolicyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeAuthrolePolicyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAccount_CERT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vaultproxy_v1_vaultproxy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAccount_OAUTH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vaultproxy_v1_vaultproxy_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GitAccount_Deploykey)(nil),
		(*GitAccount_Accesstoken)(nil),
	}
	file_vaultproxy_v1_vaultproxy_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*AuthroleRequest_K8S)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vaultproxy_v1_vaultproxy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_vaultproxy_v1_vaultproxy_proto_goTypes,
		DependencyIndexes: file_vaultproxy_v1_vaultproxy_proto_depIdxs,
		EnumInfos:         file_vaultproxy_v1_vaultproxy_proto_enumTypes,
		MessageInfos:      file_vaultproxy_v1_vaultproxy_proto_msgTypes,
	}.Build()
	File_vaultproxy_v1_vaultproxy_proto = out.File
	file_vaultproxy_v1_vaultproxy_proto_rawDesc = nil
	file_vaultproxy_v1_vaultproxy_proto_goTypes = nil
	file_vaultproxy_v1_vaultproxy_proto_depIdxs = nil
}
