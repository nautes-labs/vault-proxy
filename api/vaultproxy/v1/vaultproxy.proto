syntax = "proto3";

package api.vaultproxy.v1;

import "google/api/annotations.proto";
import "errors/errors.proto";


option go_package = "vproxy/api/vaultproxy/v1;v1";
option java_multiple_files = true;
option java_package = "api.vaultproxy.v1";

enum ErrorReason {
	option (errors.default_code) = 500;
  
	AUTH_FAILED = 0 [(errors.code) = 401];
	ACTION_NOT_ALLOW = 1 [(errors.code) = 403];
	RESOURCE_NOT_FOUND = 2 [(errors.code) = 404];
	INPUT_ARG_ERROR = 3 [(errors.code) = 400 ];
	INTERNAL_SERVICE_ERROR = 4;
}

service Secret {
	rpc CreateGit (GitRequest) returns (CreateGitReply) {
		option (google.api.http) = { 
			post: "/v1/git"
			body: "*" 
		};
	};
	rpc DeleteGit (GitRequest) returns (DeleteGitReply) {
		option (google.api.http) = { 
			delete: "/v1/git/{providertype}/{repoid}/{username}/{permission}"
		};
	};
	rpc CreatePki (PkiRequest) returns (CreatePkiReply) {
		option (google.api.http) = { 
			post: "/v1/pki"
			body: "*" 
		};
	}
	rpc DeletePki (PkiRequest) returns (DeletePkiReply) {
		option (google.api.http) = { 
			delete: "/v1/pki/{domain}"
		};
	}
	rpc CreateRepo (RepoRequest) returns (CreateRepoReply) {
		option (google.api.http) = { 
			post: "/v1/repo"
			body: "*" 
		};
 	};
	rpc DeleteRepo (RepoRequest) returns (DeleteRepoReply) {
		option (google.api.http) = { 
			delete: "/v1/repo/{providerid}/{repotype}/{repoid}/{username}/{permission}"
		};
  	};
	rpc CreteTenantGit (TenantGitRequest) returns (CreateTenantGitReply) {
		option (google.api.http) = { 
			post: "/v1/tenant/git"
			body: "*"
		};
	}
	rpc DeleteTenantGit (TenantGitRequest) returns (DeleteTenantGitReply) {
		option (google.api.http) = { 
			delete: "/v1/tenant/git/{id}"
		};
	}	
	//////////////////////////////////////////////////////////////////
	rpc CreateTenantRepo (TenantRepoRequest) returns (CreateTenantRepoReply) {
		option (google.api.http) = { 
			post: "/v1/tenant/repos"
			body: "*"
		};
	}	
	rpc DeleteTenantRepo (TenantRepoRequest) returns (DeleteTenantRepoReply) {
		option (google.api.http) = { 
			delete: "/v1/tenant/repos/{id}"
		};
	}
	rpc CreateCluster (ClusterRequest) returns (CreateClusterReply) {
		option (google.api.http) = { 
			post: "/v1/cluster"
			body: "*" 
		};
	}
	rpc DeleteCluster (ClusterRequest) returns (DeleteClusterReply) {
		option (google.api.http) = { 
			delete: "/v1/cluster/{clustertype}/{clusterid}/{username}/{permission}"
		};
	}
}

// GIT DEFINE
message GitAccount {
	oneof access {
		string deploykey 	= 1;	// Private key of keypair
		string accesstoken 	= 2; 	// Not implemented	
	}
	string accesstype = 3;		// The key of deploykey in secret 
}

message GitRequest {
	string providertype = 1; 	// Git Provider Type, gitlab or github
	string repoid = 2; 			// The id of repo in git provider
	string username = 3;		// Not implemented, force to "default" 
	string permission =	4;		// Not implemented, force to "readonly"
	GitAccount account = 5;		// Access info of this account
	map<string,string> additionalKVs = 6; // external kvs store in vault, account wiil over write it if key name is same
}

message CreateGitReply {
	string SecretName = 1;
	string SecretPath = 2;
	int32 SecretVersion = 3;
}

message DeleteGitReply {
	string msg =1;
}

// PKI DEFINE
message PkiRequest {
	string domain = 1; 
	string cacert = 2;
	string cert = 3;
	string key = 4; 
}
message CreatePkiReply {
	string SecretName = 1;
	string SecretPath = 2;
	int32 SecretVersion = 3;
}
message DeletePkiReply {
	string msg = 1;
}

// REPO DEFINE
message RepoAccount {
	string username = 1;
	string password = 2;
}

message RepoRequest {
	string providerid = 1;
	string repotype = 2;
	string repoid = 3;
	string username = 4;   			// Not implemented
	string permission = 5;  		// Not implemented
	RepoAccount account = 6;
}
message CreateRepoReply {
	string SecretName = 1;
	string SecretPath = 2;
	int32 SecretVersion = 3;
}
message DeleteRepoReply {
	string msg = 1;
}

// TENANT DEFINE
message TenantGitRequest {
	string id = 1;
	string permission = 2;			// Not implemented, force to "root"
	GitAccount account = 3;			// Access info of this account
}

message CreateTenantGitReply {
	string SecretName = 1;
	string SecretPath = 2;
	int32 SecretVersion = 3;
}
message DeleteTenantGitReply {
	string msg = 1;
}
//////////////////////////////////
message TenantRepoRequest {
	string id = 1;
	string permission = 2;
	RepoAccount account = 3;
}

message CreateTenantRepoReply {
	string SecretName = 1;
	string SecretPath = 2;
	int32 SecretVersion = 3;
}
message DeleteTenantRepoReply {
	string msg = 1;
}

// CLUSTER DEFINE
message ClusterMeta {
	string type = 1;			// Cluster resouce type, only support kubernetes now
	string id = 2; 				// Cluster name defined in git repo
}
message ClusterUser {
	string name = 1;
	string permission = 2;			// Account permission
}
message ClusterAccount {
	// Not implemented
	message CERT {
		string client_key = 1; 	
		string client_cert = 2;	
	}
	// Not implemented
	message OAUTH {		
		string username = 1;	
		string password = 2;	
	}
	CERT cert = 1;
	string token = 2;
	OAUTH oauth = 3;
	string kubeconfig = 4; 		// Kubeconfig file to access cluster
}

message ClusterRequest {
	string clustertype = 1;   		// type of cluster, such as k8s,aws, virtual machine controller, only support "kubernetes"
	string clusterid = 2;	
	string username = 3;			// Not implemented, force to "default"
	string permission = 4;			// Not implemented, force to "admin"
	ClusterAccount account = 5;  	// Cluster access info, such as kubeconfig when clsuter type is kubernetes
}

message CreateClusterReply {
	string SecretName = 1;
	string SecretPath = 2;
	int32 SecretVersion = 3;
}
message DeleteClusterReply {
	string msg = 1; 
}

// AUTH DEFINE
service Auth {
	rpc CreateAuth (AuthRequest) returns (CreateAuthReply) {
		option (google.api.http) = { 
			post: "/v1/auth"
			body: "*" 
		};
  	};
	rpc DeleteAuth (AuthRequest) returns (DeleteAuthReply) {
		option (google.api.http) = { 
			delete: "/v1/auth/{clusterName}"
		};
	};
	rpc CreateAuthrole (AuthroleRequest) returns (CreateAuthroleReply){
    option (google.api.http) = { 
			post: "/v1/auth/{clusterName}/role"
			body: "*" 
		};
  	};
	rpc DeleteAuthrole (AuthroleRequest) returns (DeleteAuthroleReply){
  	  option (google.api.http) = { 
				delete: "/v1/auth/{clusterName}/role/{destUser}"
			};
  	};
}

message Kubernetes {
  	string url = 1;				// Kubernetes URL
  	string cabundle = 2;		// Options, Kubernetes cabundle when url is https
  	string usertoken = 3;		// The k8s service account token witch has "system:auth-delegator" role
}

message AuthRequest {
  	string clusterName = 1;			// Vault auth path
  	string authType = 2;   			// Vault auth type
  	Kubernetes kubernetes = 3;		// Vault auth setting when type is k8s
  
}

message CreateAuthReply {
  	string msg = 1;
}
message DeleteAuthReply {
  	string msg = 1;
}

message KubernetesAuthRoleMeta{
  string namespaces = 1;        // Array. The namespaces of role binding
  string serviceaccounts = 2;   // Array. The serviceaccount of role binding 
}

message AuthroleRequest {
  string clusterName = 1;      // Vault path of kubernetes auth
  string destUser = 2;         // Vault role name in kubernetes auth
  oneof role {
    KubernetesAuthRoleMeta k8s = 3;
  }
}
message CreateAuthroleReply {
  string msg = 1;
}
message DeleteAuthroleReply {
  string msg = 1;
}


// Auth Grant
service AuthGrant {
  	rpc GrantAuthroleGitPolicy (AuthroleGitPolicyRequest) returns (GrantAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				post: "/v1/auth/{clusterName}/role/{destUser}/policies/git"
  	    body: "*"
			};
  	};
  	rpc RevokeAuthroleGitPolicy (AuthroleGitPolicyRequest) returns (RevokeAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				delete: "/v1/auth/{clusterName}/role/{destUser}/policies/git"
			};
  	};
  	rpc GrantAuthroleRepoPolicy (AuthroleRepoPolicyRequest) returns (GrantAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				post: "/v1/auth/{clusterName}/role/{destUser}/policies/repo"
  	    body: "*"
			};
  	};
  	rpc RevokeAuthroleRepoPolicy (AuthroleRepoPolicyRequest) returns (RevokeAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				delete: "/v1/auth/{clusterName}/role/{destUser}/policies/repo"
			};
  	};
  	rpc GrantAuthroleClusterPolicy (AuthroleClusterPolicyRequest) returns (GrantAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				post: "/v1/auth/{clusterName}/role/{destUser}/policies/cluster"
  	    body: "*"
			};
  	};
  	rpc RevokeAuthroleClusterPolicy (AuthroleClusterPolicyRequest) returns (RevokeAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				delete: "/v1/auth/{clusterName}/role/{destUser}/policies/cluster"
	  };
	};
  	rpc GrantAuthroleTenantGitPolicy (AuthroleTenantGitPolicyRequest) returns (GrantAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				post: "/v1/auth/{clusterName}/role/{destUser}/policies/tenant/git"
  	    body: "*"
			};
  	};
  	rpc RevokeAuthroleTenantGitPolicy (AuthroleTenantGitPolicyRequest) returns (RevokeAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				delete: "/v1/auth/{clusterName}/role/{destUser}/policies/tenant/git"
	  };
	};
  	rpc GrantAuthroleTenantRepoPolicy (AuthroleTenantRepoPolicyRequest) returns (GrantAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				post: "/v1/auth/{clusterName}/role/{destUser}/policies/tenant/repo"
  	    body: "*"
			};
  	};
  	rpc RevokeAuthroleTenantRepoPolicy (AuthroleTenantRepoPolicyRequest) returns (RevokeAuthrolePolicyReply) {
  	  option (google.api.http) = { 
				delete: "/v1/auth/{clusterName}/role/{destUser}/policies/tenant/repo"
	  };
	};
}

message AuthroleGitPolicyRequest {
	string clusterName = 1;
	string destUser = 2;
	GitRequest secret_options = 3;
}

message AuthroleRepoPolicyRequest {
	string clusterName = 1;
	string destUser = 2;
	RepoRequest secret_options = 3;
}

message AuthroleClusterPolicyRequest {
	string clusterName = 1;
	string destUser = 2;
	ClusterRequest secret_options = 3;
}

message AuthroleTenantGitPolicyRequest {
	string clusterName = 1;
	string destUser = 2;
	GitRequest secret_options = 3;
}

message AuthroleTenantRepoPolicyRequest {
	string clusterName = 1;
	string destUser = 2;
	RepoRequest secret_options = 3;
}

message GrantAuthrolePolicyReply {
  string msg = 1;
}
message RevokeAuthrolePolicyReply {
  string msg = 1;
}